"use strict";(self.webpackChunkdiscoveries_and_memories=self.webpackChunkdiscoveries_and_memories||[]).push([[9905],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return t?n.createElement(m,s(s({ref:r},u),{},{components:t})):n.createElement(m,s({ref:r},u))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=f;var o={};for(var l in r)hasOwnProperty.call(r,l)&&(o[l]=r[l]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1163:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=t(7462),a=(t(7294),t(3905));const i={},s="Flutter Local Storage",o={unversionedId:"library/services/local_storage",id:"library/services/local_storage",title:"Flutter Local Storage",description:"Package//pub.dev/packages/shared_preferences",source:"@site/docs/library/services/02_local_storage.mdx",sourceDirName:"library/services",slug:"/library/services/local_storage",permalink:"/docs/library/services/local_storage",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/library/services/02_local_storage.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Flutter Biometry",permalink:"/docs/library/services/biometry"},next:{title:"API Client",permalink:"/docs/library/services/api_client"}},l={},c=[{value:"Description Methods",id:"description-methods",level:2},{value:"Abstract Class",id:"abstract-class",level:2},{value:"Implementation Class",id:"implementation-class",level:2}],u={toc:c},d="wrapper";function p(e){let{components:r,...t}=e;return(0,a.kt)(d,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"flutter-local-storage"},"Flutter Local Storage"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Package: ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/packages/shared_preferences"},"https://pub.dev/packages/shared_preferences"))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Implementation Date: Jul/23"),(0,a.kt)("p",{parentName:"admonition"},"Version: 2.2.0")),(0,a.kt)("h2",{id:"description-methods"},"Description Methods"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Load an item;"),(0,a.kt)("li",{parentName:"ul"},"Save an item;"),(0,a.kt)("li",{parentName:"ul"},"Remove an item;"),(0,a.kt)("li",{parentName:"ul"},"Load Many items;"),(0,a.kt)("li",{parentName:"ul"},"Save Many items;")),(0,a.kt)("h2",{id:"abstract-class"},"Abstract Class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"abstract class ILocalStorage {\n  Future<dynamic> load({required String key});\n  Future<bool> save({required String key, required value});\n  Future<bool> remove({required String key});\n  Future<List<String>?> loadMany({required String infoKey});\n  Future<bool> saveMany(\n      {required String infoKey, required List<String> dataList});\n}\n\n")),(0,a.kt)("h2",{id:"implementation-class"},"Implementation Class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class LocalSharedPreferences implements ILocalStorage {\n  const LocalSharedPreferences();\n  @override\n  Future<dynamic> load({required String key}) async {\n    final sharedPreferences = await SharedPreferences.getInstance();\n    if (sharedPreferences.containsKey(key)) {\n      final doc = sharedPreferences.get(key);\n      return doc;\n    } else {\n      return null;\n    }\n  }\n\n  @override\n  Future<List<String>?> loadMany({required String infoKey}) async {\n    final sharedPreferences = await SharedPreferences.getInstance();\n\n    List<dynamic>? list = sharedPreferences.getStringList(infoKey);\n    if (list != null && list is List<String>) {\n      list = list.cast<String>().toList();\n      return list.toList();\n    } else {\n      return null;\n    }\n  }\n\n  @override\n  Future<bool> save({required String key, required value}) async {\n    final sharedPreferences = await SharedPreferences.getInstance();\n    if (value is String) {\n      return sharedPreferences.setString(key, value);\n    } else if (value is bool) {\n      return sharedPreferences.setBool(key, value);\n    } else if (value is int) {\n      return sharedPreferences.setInt(key, value);\n    } else if (value is double) {\n      return sharedPreferences.setDouble(key, value);\n    } else if (value is List<String>) {\n      return sharedPreferences.setStringList(key, value);\n    }\n    throw Exception('Value type (${value.runtimeType}) not valid');\n  }\n\n  @override\n  Future<bool> saveMany({required String infoKey, required List<String> dataList}) async {\n    final sharedPreferences = await SharedPreferences.getInstance();\n    return sharedPreferences.setStringList(infoKey, dataList);\n  }\n\n  @override\n  Future<bool> remove({required String key}) async {\n    try {\n      final sharedPreferences = await SharedPreferences.getInstance();\n      sharedPreferences.remove(key);\n      return true;\n    } catch (e) {\n      log(e.toString());\n      log(StackTrace.current.toString());\n      return false;\n    }\n  }\n}\n")),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Contributor: BrAcInhO")))}p.isMDXComponent=!0}}]);