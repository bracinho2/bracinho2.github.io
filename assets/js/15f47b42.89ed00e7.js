"use strict";(self.webpackChunkdiscoveries_and_memories=self.webpackChunkdiscoveries_and_memories||[]).push([[5044],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>b});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),d=o,b=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return t?r.createElement(b,c(c({ref:n},u),{},{components:t})):r.createElement(b,c({ref:n},u))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2234:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={},c="Check Available Connection",i={unversionedId:"library/services/check_connection",id:"library/services/check_connection",title:"Check Available Connection",description:"Package//pub.dev/packages/internetconnectionchecker",source:"@site/docs/library/services/06_check_connection.mdx",sourceDirName:"library/services",slug:"/library/services/check_connection",permalink:"/docs/library/services/check_connection",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/library/services/06_check_connection.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Firebase Cloud Message",permalink:"/docs/library/services/firebase_cloud_message"},next:{title:"Launch Map Location",permalink:"/docs/library/services/lauch_map_location"}},s={},l=[{value:"Description Methods",id:"description-methods",level:2},{value:"Observa\xe7\xf5es",id:"observa\xe7\xf5es",level:2},{value:"Implementation Class",id:"implementation-class",level:2}],u={toc:l},p="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"check-available-connection"},"Check Available Connection"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Package: ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/internet_connection_checker"},"https://pub.dev/packages/internet_connection_checker"))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Implementation Date: OUT/23"),(0,o.kt)("p",{parentName:"admonition"},"Version: 1.0.0+1")),(0,o.kt)("h2",{id:"description-methods"},"Description Methods"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"_getInternetStatus: verifica manualmente se h\xe1 conex\xe3o com a internet;"),(0,o.kt)("li",{parentName:"ul"},"_getConnectionStatus: \xe9 uma stream que pode ser assinada. Ela fornecer\xe1 o status peri\xf3dico da conex\xe3o com a internet;"),(0,o.kt)("li",{parentName:"ul"},"_hasListeners: retorna se existem assinantes na stream;"),(0,o.kt)("li",{parentName:"ul"},"_closeStream: fecha definivamente a stream;")),(0,o.kt)("h2",{id:"observa\xe7\xf5es"},"Observa\xe7\xf5es"),(0,o.kt)("p",null,"Este pacote verifica se realmente o dispositivo est\xe1 com conex\xe3o ativa. Os m\xe9todos s\xe3o baseados em pings em diferentes destinos."),(0,o.kt)("h2",{id:"implementation-class"},"Implementation Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dartevanescet"},"class InternetConnectionCheckerService {\n  InternetConnectionCheckerService._internal();\n\n  static final InternetConnectionCheckerService _instance =\n      InternetConnectionCheckerService._internal();\n\n  static InternetConnectionCheckerService get instance => _instance;\n\n  final InternetConnectionChecker _checker = InternetConnectionChecker();\n\n  StreamController<bool> controller = StreamController();\n\n  Future<bool> get checkInternetStatus => _getInternetStatus();\n\n  Stream<bool> get getStatus => _getConnectionStatus();\n\n  bool get hasListeners => _hasListeners();\n\n  void get close => _closeStream();\n\n  Future<bool> _getInternetStatus() async {\n    return _checker.hasConnection;\n  }\n\n  Stream<bool> _getConnectionStatus() async* {\n    _getStatusFromPlugIn().onData((status) {\n      switch (status) {\n        case InternetConnectionStatus.connected:\n          controller.sink.add(true);\n          break;\n        case InternetConnectionStatus.disconnected:\n          controller.sink.add(false);\n          break;\n      }\n    });\n\n    yield* controller.stream;\n  }\n\n  StreamSubscription<InternetConnectionStatus> _getStatusFromPlugIn() {\n    return _checker.onStatusChange.listen((status) {\n      switch (status) {\n        case InternetConnectionStatus.connected:\n          break;\n        case InternetConnectionStatus.disconnected:\n          break;\n      }\n    });\n  }\n\n  bool _hasListeners() {\n    return controller.hasListener;\n  }\n\n  void _closeStream() {\n    controller.close();\n  }\n}\n")),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Contribuitor: BrAcInhO")))}m.isMDXComponent=!0}}]);