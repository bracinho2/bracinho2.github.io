"use strict";(self.webpackChunkdiscoveries_and_memories=self.webpackChunkdiscoveries_and_memories||[]).push([[3983],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>f});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),p=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=p(e.components);return a.createElement(l.Provider,{value:r},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=n,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return t?a.createElement(f,o(o({ref:r},u),{},{components:t})):a.createElement(f,o({ref:r},u))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[c]="string"==typeof e?e:n,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},719:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(7462),n=(t(7294),t(3905));const i={},o="LSP - Liskov Substituition Principle",s={unversionedId:"solid_in_a_real_world/lsp",id:"solid_in_a_real_world/lsp",title:"LSP - Liskov Substituition Principle",description:'"...para criar software a partir de partes intercambi\xe1veis, estas partes devem aderir a um contrato que permita que elas sejam substitu\xeddas umas pelas outras".',source:"@site/docs/solid_in_a_real_world/04_lsp.mdx",sourceDirName:"solid_in_a_real_world",slug:"/solid_in_a_real_world/lsp",permalink:"/docs/solid_in_a_real_world/lsp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/solid_in_a_real_world/04_lsp.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OCP - Open Closed Principle",permalink:"/docs/solid_in_a_real_world/ocp"},next:{title:"ISP - Interface Segregation Principle",permalink:"/docs/solid_in_a_real_world/isp"}},l={},p=[],u={toc:p},c="wrapper";function d(e){let{components:r,...t}=e;return(0,n.kt)(c,(0,a.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"lsp---liskov-substituition-principle"},"LSP - Liskov Substituition Principle"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},'"...para criar software a partir de partes intercambi\xe1veis, estas partes devem aderir a um contrato que permita que elas sejam substitu\xeddas umas pelas outras".'),(0,n.kt)("p",{parentName:"admonition"},'"...ao longo dos anos, o LSP se transformou em um princ\xedpio mais amplo de design de software, aplic\xe1vel a interfaces e implementa\xe7\xf5es. (...) o LSP \xe9 aplic\xe1vel porque h\xe1 usu\xe1rios que dependem de interfaces bem definidas e da capacidade de substitui\xe7\xe3o das implementa\xe7\xf5es destas interfaces".'),(0,n.kt)("p",{parentName:"admonition"},'Conclu\xedmos que, embora a abstra\xe7\xe3o de dados seja mais importante, a hierarquia de tipos estende sua utilidade. Al\xe9m disso, a heran\xe7a \xe0s vezes \xe9 necess\xe1ria para expressar a hierarquia de tipos e, portanto, \xe9 um mecanismo \xfatil\u2026" (Barbara Liskov)')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"class A {\n    quemSou() => 'Eu sou o SAM';\n}\n\nClass B extends A {\n    @override\n    quemSou() => 'Eu sou EDEN';\n}\n\nClass C extends A {\n    @override\n    quemSou() => 'Eu sou CHARLES';\n}\n")))}d.isMDXComponent=!0}}]);