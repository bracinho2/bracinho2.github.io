"use strict";(self.webpackChunkdiscoveries_and_memories=self.webpackChunkdiscoveries_and_memories||[]).push([[9351],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[m]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6985:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={},o="Flutter Biometry",c={unversionedId:"library/services/biometry",id:"library/services/biometry",title:"Flutter Biometry",description:"Package//pub.dev/packages/local_auth",source:"@site/docs/library/services/01_biometry.mdx",sourceDirName:"library/services",slug:"/library/services/biometry",permalink:"/docs/library/services/biometry",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/library/services/01_biometry.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"My Library",permalink:"/docs/library/intro"},next:{title:"Flutter Local Storage",permalink:"/docs/library/services/local_storage"}},s={},l=[{value:"Description Methods",id:"description-methods",level:2},{value:"Abstract Class",id:"abstract-class",level:2},{value:"Implementation Class",id:"implementation-class",level:2}],u={toc:l},m="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"flutter-biometry"},"Flutter Biometry"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Package: ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/packages/local_auth"},"https://pub.dev/packages/local_auth"))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Implementation Date: Jul/23"),(0,a.kt)("p",{parentName:"admonition"},"Version: 2.1.6")),(0,a.kt)("h2",{id:"description-methods"},"Description Methods"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Device Has Biometrics: check if have biometrics methods on device;"),(0,a.kt)("li",{parentName:"ul"},"Get Available Biometrics: Differente devices have diferent methods;"),(0,a.kt)("li",{parentName:"ul"},"Autenticate: Let OS determine authentication method;"),(0,a.kt)("li",{parentName:"ul"},"Cancel Authentication;")),(0,a.kt)("h2",{id:"abstract-class"},"Abstract Class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"abstract class BiometricsService {\n  Future<bool> deviceHasBiometrics();\n  Future<List<BiometricType>> getAvailableBiometrics();\n  Future<bool> autenticate({required String authReason});\n  Future<bool> authenticateWithBiometrics({required String authReason});\n  Future<bool> cancelAuthentication();\n}\n")),(0,a.kt)("h2",{id:"implementation-class"},"Implementation Class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class LocalAuth implements BiometricsService {\n  final LocalAuthentication auth;\n\n  LocalAuth(this.auth);\n\n  @override\n  Future<bool> autenticate({required String authReason}) async {\n    bool authenticated = false;\n    try {\n      authenticated = await auth.authenticate(\n        authMessages: const [\n          AndroidAuthMessages(\n            signInTitle: 'Confirmar sua identidade',\n            cancelButton: 'Cancelar',\n          ),\n          IOSAuthMessages(\n            cancelButton: 'Cancelar',\n          )\n        ],\n        localizedReason: authReason,\n        options: const AuthenticationOptions(\n          stickyAuth: true,\n        ),\n      );\n    } on PlatformException catch (e) {\n      log(e.toString());\n      log(StackTrace.current.toString());\n    }\n    return authenticated;\n  }\n\n  @override\n  Future<bool> authenticateWithBiometrics({required String authReason}) async {\n    bool authenticated = false;\n    try {\n      authenticated = await auth.authenticate(\n        localizedReason: authReason,\n        options: const AuthenticationOptions(\n          stickyAuth: true,\n          biometricOnly: true,\n        ),\n        authMessages: const [\n          AndroidAuthMessages(\n            signInTitle: 'Confirmar sua identidade',\n            cancelButton: 'Cancelar',\n            biometricHint: '',\n          ),\n          IOSAuthMessages(\n            cancelButton: 'Cancelar',\n          )\n        ],\n      );\n      return authenticated;\n    } on PlatformException catch (e) {\n      e.runtimeType;\n      log(e.toString());\n      log(StackTrace.current.toString());\n\n      return false;\n    }\n  }\n\n  @override\n  Future<bool> cancelAuthentication() async {\n    return await auth.stopAuthentication();\n  }\n\n  @override\n  Future<bool> deviceHasBiometrics() async {\n    late bool canCheckBiometrics;\n    try {\n      canCheckBiometrics = await auth.canCheckBiometrics;\n    } on PlatformException catch (e) {\n      canCheckBiometrics = false;\n      log(e.toString());\n      log(StackTrace.current.toString());\n    }\n\n    return canCheckBiometrics;\n  }\n\n  @override\n  Future<List<BiometricType>> getAvailableBiometrics() async {\n    late List<BiometricType> availableBiometrics;\n    try {\n      availableBiometrics = await auth.getAvailableBiometrics();\n    } on PlatformException catch (e) {\n      availableBiometrics = <BiometricType>[];\n      log(e.toString());\n      log(StackTrace.current.toString()); \n    }\n\n    return availableBiometrics;\n  }\n}\n")),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Contributor: BrAcInhO")))}p.isMDXComponent=!0}}]);